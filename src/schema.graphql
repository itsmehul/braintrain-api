type Query {
	classrooms: [Classroom!]
	users: [User!]
	myprofile: User!
	user(id: ID!): User
	classroom(id: ID!): Classroom
	lectures: [Lecture!]
	lecture(id: ID!): Lecture
}
type Mutation {
	signup(email: String!, fid: String!, name: String!): AuthPayload
	login(email: String!, fid: String!): AuthPayload
  #STUDENT mutations
	joinBatch(batchId: ID!, classroomId: ID!): Batch
  joinLiveLecture(lectureId: ID!, batchId: ID!): Lecture

  # TEACHER mutations
	createClassroom( name: String!, classroomImage:String!, description: String!, learning: String!, language: String!, requirements: String!, objectives: String! ): Classroom
	createBatch( name: String! description: String! startsFrom: String fee: Float, classroomId: ID ): Batch
	createLecture( name: String! description: String, liveAt: String, endAt: String, classroomId:ID!, batchId: ID!):Lecture
	updateUser(name: String, dpUrl: String, description: String, profession: String): User
	deleteUser: User
	updateClassroom( name: String, classroomImage:String, description: String, learning: String, language: String, requirements: String, objectives: String, classroomId: ID! ): Classroom
	deleteClassroom( classroomId: ID! ): Classroom
	updateBatch( name: String description: String startsFrom: String fee: Float, batchId: ID! ): Batch
	deleteBatch( batchId: ID! ): Batch
  updateLecture(name: String description: String, liveAt: String, endAt: String, lectureId: ID!):Lecture
  deleteLecture(lectureId: ID!):Lecture
	# ADMIN mutations
	promoteUser(email: String): User
}

type Classroom {
	id: ID!
	createdAt: String!
	updatedAt: String!
	name: String!
	teacher: User!
  students: [User!]
	description: String
	classroomImage: String
	rating: Int
	learning: String
	language: String
	requirements: String
	objectives: String
	batches: [Batch!]
	myclass: Boolean
}


type Batch {
	id: ID!
	createdAt: String!
	updatedAt: String!
	lectures: [Lecture!]
	teacher: User!
	students: [User!]
  classroom: Classroom
  	name: String!
	description: String!
	startsFrom: String
	fee: Float

}

type Lecture {
	id: ID!
	createdAt: String!
	updatedAt: String!
	classroom: Classroom
	name: String!
	description: String!
	liveAt: String!
	endAt: String!
	teacher: User
  students: [User]
}

type User {
	id: ID!
	createdAt: String!
	updatedAt: String!
	name: String!
	email: String!
	description: String
	profession: String
	role: String
	dpUrl: String
	teacherIn: [Classroom!]
	studentIn: [Classroom!]
}

type AuthPayload {
	token: String
	user: User
}
