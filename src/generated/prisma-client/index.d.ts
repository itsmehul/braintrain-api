// Code generated by Prisma (prisma@1.25.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  batch: (where?: BatchWhereInput) => Promise<boolean>;
  classroom: (where?: ClassroomWhereInput) => Promise<boolean>;
  lecture: (where?: LectureWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  batch: (where: BatchWhereUniqueInput) => BatchPromise;
  batches: (args?: {
    where?: BatchWhereInput;
    orderBy?: BatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Batch>;
  batchesConnection: (args?: {
    where?: BatchWhereInput;
    orderBy?: BatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BatchConnectionPromise;
  classroom: (where: ClassroomWhereUniqueInput) => ClassroomPromise;
  classrooms: (args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Classroom>;
  classroomsConnection: (args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClassroomConnectionPromise;
  lecture: (where: LectureWhereUniqueInput) => LecturePromise;
  lectures: (args?: {
    where?: LectureWhereInput;
    orderBy?: LectureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Lecture>;
  lecturesConnection: (args?: {
    where?: LectureWhereInput;
    orderBy?: LectureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LectureConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBatch: (data: BatchCreateInput) => BatchPromise;
  updateBatch: (args: {
    data: BatchUpdateInput;
    where: BatchWhereUniqueInput;
  }) => BatchPromise;
  updateManyBatches: (args: {
    data: BatchUpdateManyMutationInput;
    where?: BatchWhereInput;
  }) => BatchPayloadPromise;
  upsertBatch: (args: {
    where: BatchWhereUniqueInput;
    create: BatchCreateInput;
    update: BatchUpdateInput;
  }) => BatchPromise;
  deleteBatch: (where: BatchWhereUniqueInput) => BatchPromise;
  deleteManyBatches: (where?: BatchWhereInput) => BatchPayloadPromise;
  createClassroom: (data: ClassroomCreateInput) => ClassroomPromise;
  updateClassroom: (args: {
    data: ClassroomUpdateInput;
    where: ClassroomWhereUniqueInput;
  }) => ClassroomPromise;
  updateManyClassrooms: (args: {
    data: ClassroomUpdateManyMutationInput;
    where?: ClassroomWhereInput;
  }) => BatchPayloadPromise;
  upsertClassroom: (args: {
    where: ClassroomWhereUniqueInput;
    create: ClassroomCreateInput;
    update: ClassroomUpdateInput;
  }) => ClassroomPromise;
  deleteClassroom: (where: ClassroomWhereUniqueInput) => ClassroomPromise;
  deleteManyClassrooms: (where?: ClassroomWhereInput) => BatchPayloadPromise;
  createLecture: (data: LectureCreateInput) => LecturePromise;
  updateLecture: (args: {
    data: LectureUpdateInput;
    where: LectureWhereUniqueInput;
  }) => LecturePromise;
  updateManyLectures: (args: {
    data: LectureUpdateManyMutationInput;
    where?: LectureWhereInput;
  }) => BatchPayloadPromise;
  upsertLecture: (args: {
    where: LectureWhereUniqueInput;
    create: LectureCreateInput;
    update: LectureUpdateInput;
  }) => LecturePromise;
  deleteLecture: (where: LectureWhereUniqueInput) => LecturePromise;
  deleteManyLectures: (where?: LectureWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  batch: (
    where?: BatchSubscriptionWhereInput
  ) => BatchSubscriptionPayloadSubscription;
  classroom: (
    where?: ClassroomSubscriptionWhereInput
  ) => ClassroomSubscriptionPayloadSubscription;
  lecture: (
    where?: LectureSubscriptionWhereInput
  ) => LectureSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserRole = "TEACHER" | "STUDENT" | "ADMIN";

export type LectureOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "liveAt_ASC"
  | "liveAt_DESC"
  | "endAt_ASC"
  | "endAt_DESC";

export type ClassroomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "classroomImage_ASC"
  | "classroomImage_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "learning_ASC"
  | "learning_DESC"
  | "language_ASC"
  | "language_DESC"
  | "requirements_ASC"
  | "requirements_DESC"
  | "objectives_ASC"
  | "objectives_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "fid_ASC"
  | "fid_DESC"
  | "role_ASC"
  | "role_DESC"
  | "description_ASC"
  | "description_DESC"
  | "profession_ASC"
  | "profession_DESC"
  | "dpUrl_ASC"
  | "dpUrl_DESC";

export type BatchOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "startsFrom_ASC"
  | "startsFrom_DESC"
  | "fee_ASC"
  | "fee_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithWhereUniqueWithoutStudentInInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutStudentInDataInput;
}

export type BatchWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface ClassroomWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  teacher?: UserWhereInput;
  students_every?: UserWhereInput;
  students_some?: UserWhereInput;
  students_none?: UserWhereInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  classroomImage?: String;
  classroomImage_not?: String;
  classroomImage_in?: String[] | String;
  classroomImage_not_in?: String[] | String;
  classroomImage_lt?: String;
  classroomImage_lte?: String;
  classroomImage_gt?: String;
  classroomImage_gte?: String;
  classroomImage_contains?: String;
  classroomImage_not_contains?: String;
  classroomImage_starts_with?: String;
  classroomImage_not_starts_with?: String;
  classroomImage_ends_with?: String;
  classroomImage_not_ends_with?: String;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  learning?: String;
  learning_not?: String;
  learning_in?: String[] | String;
  learning_not_in?: String[] | String;
  learning_lt?: String;
  learning_lte?: String;
  learning_gt?: String;
  learning_gte?: String;
  learning_contains?: String;
  learning_not_contains?: String;
  learning_starts_with?: String;
  learning_not_starts_with?: String;
  learning_ends_with?: String;
  learning_not_ends_with?: String;
  language?: String;
  language_not?: String;
  language_in?: String[] | String;
  language_not_in?: String[] | String;
  language_lt?: String;
  language_lte?: String;
  language_gt?: String;
  language_gte?: String;
  language_contains?: String;
  language_not_contains?: String;
  language_starts_with?: String;
  language_not_starts_with?: String;
  language_ends_with?: String;
  language_not_ends_with?: String;
  requirements?: String;
  requirements_not?: String;
  requirements_in?: String[] | String;
  requirements_not_in?: String[] | String;
  requirements_lt?: String;
  requirements_lte?: String;
  requirements_gt?: String;
  requirements_gte?: String;
  requirements_contains?: String;
  requirements_not_contains?: String;
  requirements_starts_with?: String;
  requirements_not_starts_with?: String;
  requirements_ends_with?: String;
  requirements_not_ends_with?: String;
  objectives?: String;
  objectives_not?: String;
  objectives_in?: String[] | String;
  objectives_not_in?: String[] | String;
  objectives_lt?: String;
  objectives_lte?: String;
  objectives_gt?: String;
  objectives_gte?: String;
  objectives_contains?: String;
  objectives_not_contains?: String;
  objectives_starts_with?: String;
  objectives_not_starts_with?: String;
  objectives_ends_with?: String;
  objectives_not_ends_with?: String;
  batches_every?: BatchWhereInput;
  batches_some?: BatchWhereInput;
  batches_none?: BatchWhereInput;
  AND?: ClassroomWhereInput[] | ClassroomWhereInput;
  OR?: ClassroomWhereInput[] | ClassroomWhereInput;
  NOT?: ClassroomWhereInput[] | ClassroomWhereInput;
}

export interface UserUpdateManyDataInput {
  name?: String;
  email?: String;
  fid?: String;
  role?: UserRole;
  description?: String;
  profession?: String;
  dpUrl?: String;
}

export interface BatchWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  lectures_every?: LectureWhereInput;
  lectures_some?: LectureWhereInput;
  lectures_none?: LectureWhereInput;
  teacher?: UserWhereInput;
  students_every?: UserWhereInput;
  students_some?: UserWhereInput;
  students_none?: UserWhereInput;
  classroom?: ClassroomWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  startsFrom?: DateTimeInput;
  startsFrom_not?: DateTimeInput;
  startsFrom_in?: DateTimeInput[] | DateTimeInput;
  startsFrom_not_in?: DateTimeInput[] | DateTimeInput;
  startsFrom_lt?: DateTimeInput;
  startsFrom_lte?: DateTimeInput;
  startsFrom_gt?: DateTimeInput;
  startsFrom_gte?: DateTimeInput;
  fee?: Float;
  fee_not?: Float;
  fee_in?: Float[] | Float;
  fee_not_in?: Float[] | Float;
  fee_lt?: Float;
  fee_lte?: Float;
  fee_gt?: Float;
  fee_gte?: Float;
  AND?: BatchWhereInput[] | BatchWhereInput;
  OR?: BatchWhereInput[] | BatchWhereInput;
  NOT?: BatchWhereInput[] | BatchWhereInput;
}

export interface BatchUpdateManyWithoutClassroomInput {
  create?:
    | BatchCreateWithoutClassroomInput[]
    | BatchCreateWithoutClassroomInput;
  delete?: BatchWhereUniqueInput[] | BatchWhereUniqueInput;
  connect?: BatchWhereUniqueInput[] | BatchWhereUniqueInput;
  disconnect?: BatchWhereUniqueInput[] | BatchWhereUniqueInput;
  update?:
    | BatchUpdateWithWhereUniqueWithoutClassroomInput[]
    | BatchUpdateWithWhereUniqueWithoutClassroomInput;
  upsert?:
    | BatchUpsertWithWhereUniqueWithoutClassroomInput[]
    | BatchUpsertWithWhereUniqueWithoutClassroomInput;
  deleteMany?: BatchScalarWhereInput[] | BatchScalarWhereInput;
  updateMany?:
    | BatchUpdateManyWithWhereNestedInput[]
    | BatchUpdateManyWithWhereNestedInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  fid?: String;
  fid_not?: String;
  fid_in?: String[] | String;
  fid_not_in?: String[] | String;
  fid_lt?: String;
  fid_lte?: String;
  fid_gt?: String;
  fid_gte?: String;
  fid_contains?: String;
  fid_not_contains?: String;
  fid_starts_with?: String;
  fid_not_starts_with?: String;
  fid_ends_with?: String;
  fid_not_ends_with?: String;
  role?: UserRole;
  role_not?: UserRole;
  role_in?: UserRole[] | UserRole;
  role_not_in?: UserRole[] | UserRole;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  profession?: String;
  profession_not?: String;
  profession_in?: String[] | String;
  profession_not_in?: String[] | String;
  profession_lt?: String;
  profession_lte?: String;
  profession_gt?: String;
  profession_gte?: String;
  profession_contains?: String;
  profession_not_contains?: String;
  profession_starts_with?: String;
  profession_not_starts_with?: String;
  profession_ends_with?: String;
  profession_not_ends_with?: String;
  dpUrl?: String;
  dpUrl_not?: String;
  dpUrl_in?: String[] | String;
  dpUrl_not_in?: String[] | String;
  dpUrl_lt?: String;
  dpUrl_lte?: String;
  dpUrl_gt?: String;
  dpUrl_gte?: String;
  dpUrl_contains?: String;
  dpUrl_not_contains?: String;
  dpUrl_starts_with?: String;
  dpUrl_not_starts_with?: String;
  dpUrl_ends_with?: String;
  dpUrl_not_ends_with?: String;
  teacherIn_every?: ClassroomWhereInput;
  teacherIn_some?: ClassroomWhereInput;
  teacherIn_none?: ClassroomWhereInput;
  studentIn_every?: ClassroomWhereInput;
  studentIn_some?: ClassroomWhereInput;
  studentIn_none?: ClassroomWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface LectureUpdateManyWithoutBatchInput {
  create?: LectureCreateWithoutBatchInput[] | LectureCreateWithoutBatchInput;
  delete?: LectureWhereUniqueInput[] | LectureWhereUniqueInput;
  connect?: LectureWhereUniqueInput[] | LectureWhereUniqueInput;
  disconnect?: LectureWhereUniqueInput[] | LectureWhereUniqueInput;
  update?:
    | LectureUpdateWithWhereUniqueWithoutBatchInput[]
    | LectureUpdateWithWhereUniqueWithoutBatchInput;
  upsert?:
    | LectureUpsertWithWhereUniqueWithoutBatchInput[]
    | LectureUpsertWithWhereUniqueWithoutBatchInput;
  deleteMany?: LectureScalarWhereInput[] | LectureScalarWhereInput;
  updateMany?:
    | LectureUpdateManyWithWhereNestedInput[]
    | LectureUpdateManyWithWhereNestedInput;
}

export interface LectureUpdateManyWithWhereNestedInput {
  where: LectureScalarWhereInput;
  data: LectureUpdateManyDataInput;
}

export interface LectureUpdateWithWhereUniqueWithoutBatchInput {
  where: LectureWhereUniqueInput;
  data: LectureUpdateWithoutBatchDataInput;
}

export interface BatchUpdateWithWhereUniqueWithoutClassroomInput {
  where: BatchWhereUniqueInput;
  data: BatchUpdateWithoutClassroomDataInput;
}

export interface LectureUpdateWithoutBatchDataInput {
  name?: String;
  description?: String;
  liveAt?: DateTimeInput;
  endAt?: DateTimeInput;
  teacher?: UserUpdateOneInput;
  students?: UserUpdateManyInput;
  classroom?: ClassroomUpdateOneInput;
}

export interface LectureWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  liveAt?: DateTimeInput;
  liveAt_not?: DateTimeInput;
  liveAt_in?: DateTimeInput[] | DateTimeInput;
  liveAt_not_in?: DateTimeInput[] | DateTimeInput;
  liveAt_lt?: DateTimeInput;
  liveAt_lte?: DateTimeInput;
  liveAt_gt?: DateTimeInput;
  liveAt_gte?: DateTimeInput;
  endAt?: DateTimeInput;
  endAt_not?: DateTimeInput;
  endAt_in?: DateTimeInput[] | DateTimeInput;
  endAt_not_in?: DateTimeInput[] | DateTimeInput;
  endAt_lt?: DateTimeInput;
  endAt_lte?: DateTimeInput;
  endAt_gt?: DateTimeInput;
  endAt_gte?: DateTimeInput;
  teacher?: UserWhereInput;
  students_every?: UserWhereInput;
  students_some?: UserWhereInput;
  students_none?: UserWhereInput;
  batch?: BatchWhereInput;
  classroom?: ClassroomWhereInput;
  AND?: LectureWhereInput[] | LectureWhereInput;
  OR?: LectureWhereInput[] | LectureWhereInput;
  NOT?: LectureWhereInput[] | LectureWhereInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface ClassroomSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ClassroomWhereInput;
  AND?: ClassroomSubscriptionWhereInput[] | ClassroomSubscriptionWhereInput;
  OR?: ClassroomSubscriptionWhereInput[] | ClassroomSubscriptionWhereInput;
  NOT?: ClassroomSubscriptionWhereInput[] | ClassroomSubscriptionWhereInput;
}

export interface UserUpdateDataInput {
  name?: String;
  email?: String;
  fid?: String;
  role?: UserRole;
  description?: String;
  profession?: String;
  dpUrl?: String;
  teacherIn?: ClassroomUpdateManyWithoutTeacherInput;
  studentIn?: ClassroomUpdateManyWithoutStudentsInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  fid?: String;
  role?: UserRole;
  description?: String;
  profession?: String;
  dpUrl?: String;
}

export interface ClassroomUpdateManyWithoutTeacherInput {
  create?:
    | ClassroomCreateWithoutTeacherInput[]
    | ClassroomCreateWithoutTeacherInput;
  delete?: ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput;
  connect?: ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput;
  disconnect?: ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput;
  update?:
    | ClassroomUpdateWithWhereUniqueWithoutTeacherInput[]
    | ClassroomUpdateWithWhereUniqueWithoutTeacherInput;
  upsert?:
    | ClassroomUpsertWithWhereUniqueWithoutTeacherInput[]
    | ClassroomUpsertWithWhereUniqueWithoutTeacherInput;
  deleteMany?: ClassroomScalarWhereInput[] | ClassroomScalarWhereInput;
  updateMany?:
    | ClassroomUpdateManyWithWhereNestedInput[]
    | ClassroomUpdateManyWithWhereNestedInput;
}

export interface LectureUpdateManyMutationInput {
  name?: String;
  description?: String;
  liveAt?: DateTimeInput;
  endAt?: DateTimeInput;
}

export interface ClassroomUpdateWithWhereUniqueWithoutTeacherInput {
  where: ClassroomWhereUniqueInput;
  data: ClassroomUpdateWithoutTeacherDataInput;
}

export interface BatchUpsertWithoutLecturesInput {
  update: BatchUpdateWithoutLecturesDataInput;
  create: BatchCreateWithoutLecturesInput;
}

export interface ClassroomUpdateWithoutTeacherDataInput {
  name?: String;
  students?: UserUpdateManyWithoutStudentInInput;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
  batches?: BatchUpdateManyWithoutClassroomInput;
}

export interface BatchUpdateOneWithoutLecturesInput {
  create?: BatchCreateWithoutLecturesInput;
  update?: BatchUpdateWithoutLecturesDataInput;
  upsert?: BatchUpsertWithoutLecturesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: BatchWhereUniqueInput;
}

export interface UserUpdateManyWithoutStudentInInput {
  create?: UserCreateWithoutStudentInInput[] | UserCreateWithoutStudentInInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutStudentInInput[]
    | UserUpdateWithWhereUniqueWithoutStudentInInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutStudentInInput[]
    | UserUpsertWithWhereUniqueWithoutStudentInInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface LectureUpdateInput {
  name?: String;
  description?: String;
  liveAt?: DateTimeInput;
  endAt?: DateTimeInput;
  teacher?: UserUpdateOneInput;
  students?: UserUpdateManyInput;
  batch?: BatchUpdateOneWithoutLecturesInput;
  classroom?: ClassroomUpdateOneInput;
}

export interface BatchUpdateManyMutationInput {
  name?: String;
  description?: String;
  startsFrom?: DateTimeInput;
  fee?: Float;
}

export interface BatchCreateOneWithoutLecturesInput {
  create?: BatchCreateWithoutLecturesInput;
  connect?: BatchWhereUniqueInput;
}

export interface UserUpdateWithoutStudentInDataInput {
  name?: String;
  email?: String;
  fid?: String;
  role?: UserRole;
  description?: String;
  profession?: String;
  dpUrl?: String;
  teacherIn?: ClassroomUpdateManyWithoutTeacherInput;
}

export interface LectureCreateInput {
  name: String;
  description: String;
  liveAt: DateTimeInput;
  endAt: DateTimeInput;
  teacher?: UserCreateOneInput;
  students?: UserCreateManyInput;
  batch?: BatchCreateOneWithoutLecturesInput;
  classroom?: ClassroomCreateOneInput;
}

export interface UserUpsertWithWhereUniqueWithoutStudentInInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutStudentInDataInput;
  create: UserCreateWithoutStudentInInput;
}

export interface ClassroomUpdateInput {
  name?: String;
  teacher?: UserUpdateOneRequiredWithoutTeacherInInput;
  students?: UserUpdateManyWithoutStudentInInput;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
  batches?: BatchUpdateManyWithoutClassroomInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  fid?: String;
  fid_not?: String;
  fid_in?: String[] | String;
  fid_not_in?: String[] | String;
  fid_lt?: String;
  fid_lte?: String;
  fid_gt?: String;
  fid_gte?: String;
  fid_contains?: String;
  fid_not_contains?: String;
  fid_starts_with?: String;
  fid_not_starts_with?: String;
  fid_ends_with?: String;
  fid_not_ends_with?: String;
  role?: UserRole;
  role_not?: UserRole;
  role_in?: UserRole[] | UserRole;
  role_not_in?: UserRole[] | UserRole;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  profession?: String;
  profession_not?: String;
  profession_in?: String[] | String;
  profession_not_in?: String[] | String;
  profession_lt?: String;
  profession_lte?: String;
  profession_gt?: String;
  profession_gte?: String;
  profession_contains?: String;
  profession_not_contains?: String;
  profession_starts_with?: String;
  profession_not_starts_with?: String;
  profession_ends_with?: String;
  profession_not_ends_with?: String;
  dpUrl?: String;
  dpUrl_not?: String;
  dpUrl_in?: String[] | String;
  dpUrl_not_in?: String[] | String;
  dpUrl_lt?: String;
  dpUrl_lte?: String;
  dpUrl_gt?: String;
  dpUrl_gte?: String;
  dpUrl_contains?: String;
  dpUrl_not_contains?: String;
  dpUrl_starts_with?: String;
  dpUrl_not_starts_with?: String;
  dpUrl_ends_with?: String;
  dpUrl_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface BatchCreateInput {
  lectures?: LectureCreateManyWithoutBatchInput;
  teacher: UserCreateOneInput;
  students?: UserCreateManyInput;
  classroom?: ClassroomCreateOneWithoutBatchesInput;
  name: String;
  description: String;
  startsFrom?: DateTimeInput;
  fee?: Float;
}

export interface ClassroomUpsertWithoutBatchesInput {
  update: ClassroomUpdateWithoutBatchesDataInput;
  create: ClassroomCreateWithoutBatchesInput;
}

export interface LectureCreateWithoutBatchInput {
  name: String;
  description: String;
  liveAt: DateTimeInput;
  endAt: DateTimeInput;
  teacher?: UserCreateOneInput;
  students?: UserCreateManyInput;
  classroom?: ClassroomCreateOneInput;
}

export interface ClassroomUpdateWithoutBatchesDataInput {
  name?: String;
  teacher?: UserUpdateOneRequiredWithoutTeacherInInput;
  students?: UserUpdateManyWithoutStudentInInput;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
}

export interface UserCreateInput {
  name: String;
  email: String;
  fid: String;
  role?: UserRole;
  description?: String;
  profession?: String;
  dpUrl?: String;
  teacherIn?: ClassroomCreateManyWithoutTeacherInput;
  studentIn?: ClassroomCreateManyWithoutStudentsInput;
}

export interface ClassroomUpdateOneWithoutBatchesInput {
  create?: ClassroomCreateWithoutBatchesInput;
  update?: ClassroomUpdateWithoutBatchesDataInput;
  upsert?: ClassroomUpsertWithoutBatchesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ClassroomWhereUniqueInput;
}

export interface ClassroomCreateWithoutTeacherInput {
  name: String;
  students?: UserCreateManyWithoutStudentInInput;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
  batches?: BatchCreateManyWithoutClassroomInput;
}

export interface LectureUpdateManyDataInput {
  name?: String;
  description?: String;
  liveAt?: DateTimeInput;
  endAt?: DateTimeInput;
}

export interface UserCreateWithoutStudentInInput {
  name: String;
  email: String;
  fid: String;
  role?: UserRole;
  description?: String;
  profession?: String;
  dpUrl?: String;
  teacherIn?: ClassroomCreateManyWithoutTeacherInput;
}

export interface BatchUpdateWithoutClassroomDataInput {
  lectures?: LectureUpdateManyWithoutBatchInput;
  teacher?: UserUpdateOneRequiredInput;
  students?: UserUpdateManyInput;
  name?: String;
  description?: String;
  startsFrom?: DateTimeInput;
  fee?: Float;
}

export interface BatchCreateWithoutClassroomInput {
  lectures?: LectureCreateManyWithoutBatchInput;
  teacher: UserCreateOneInput;
  students?: UserCreateManyInput;
  name: String;
  description: String;
  startsFrom?: DateTimeInput;
  fee?: Float;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface ClassroomCreateManyWithoutStudentsInput {
  create?:
    | ClassroomCreateWithoutStudentsInput[]
    | ClassroomCreateWithoutStudentsInput;
  connect?: ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserCreateOneWithoutTeacherInInput {
  create?: UserCreateWithoutTeacherInInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateManyInput {
  create?: UserCreateInput[] | UserCreateInput;
  update?:
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput;
  upsert?:
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface ClassroomCreateOneInput {
  create?: ClassroomCreateInput;
  connect?: ClassroomWhereUniqueInput;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface ClassroomCreateOneWithoutBatchesInput {
  create?: ClassroomCreateWithoutBatchesInput;
  connect?: ClassroomWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface BatchUpdateInput {
  lectures?: LectureUpdateManyWithoutBatchInput;
  teacher?: UserUpdateOneRequiredInput;
  students?: UserUpdateManyInput;
  classroom?: ClassroomUpdateOneWithoutBatchesInput;
  name?: String;
  description?: String;
  startsFrom?: DateTimeInput;
  fee?: Float;
}

export interface BatchUpsertWithWhereUniqueWithoutClassroomInput {
  where: BatchWhereUniqueInput;
  update: BatchUpdateWithoutClassroomDataInput;
  create: BatchCreateWithoutClassroomInput;
}

export interface LectureSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LectureWhereInput;
  AND?: LectureSubscriptionWhereInput[] | LectureSubscriptionWhereInput;
  OR?: LectureSubscriptionWhereInput[] | LectureSubscriptionWhereInput;
  NOT?: LectureSubscriptionWhereInput[] | LectureSubscriptionWhereInput;
}

export interface BatchScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  startsFrom?: DateTimeInput;
  startsFrom_not?: DateTimeInput;
  startsFrom_in?: DateTimeInput[] | DateTimeInput;
  startsFrom_not_in?: DateTimeInput[] | DateTimeInput;
  startsFrom_lt?: DateTimeInput;
  startsFrom_lte?: DateTimeInput;
  startsFrom_gt?: DateTimeInput;
  startsFrom_gte?: DateTimeInput;
  fee?: Float;
  fee_not?: Float;
  fee_in?: Float[] | Float;
  fee_not_in?: Float[] | Float;
  fee_lt?: Float;
  fee_lte?: Float;
  fee_gt?: Float;
  fee_gte?: Float;
  AND?: BatchScalarWhereInput[] | BatchScalarWhereInput;
  OR?: BatchScalarWhereInput[] | BatchScalarWhereInput;
  NOT?: BatchScalarWhereInput[] | BatchScalarWhereInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  fid?: String;
  role?: UserRole;
  description?: String;
  profession?: String;
  dpUrl?: String;
  teacherIn?: ClassroomUpdateManyWithoutTeacherInput;
  studentIn?: ClassroomUpdateManyWithoutStudentsInput;
}

export interface BatchUpdateManyWithWhereNestedInput {
  where: BatchScalarWhereInput;
  data: BatchUpdateManyDataInput;
}

export interface BatchUpdateWithoutLecturesDataInput {
  teacher?: UserUpdateOneRequiredInput;
  students?: UserUpdateManyInput;
  classroom?: ClassroomUpdateOneWithoutBatchesInput;
  name?: String;
  description?: String;
  startsFrom?: DateTimeInput;
  fee?: Float;
}

export interface BatchUpdateManyDataInput {
  name?: String;
  description?: String;
  startsFrom?: DateTimeInput;
  fee?: Float;
}

export interface BatchCreateWithoutLecturesInput {
  teacher: UserCreateOneInput;
  students?: UserCreateManyInput;
  classroom?: ClassroomCreateOneWithoutBatchesInput;
  name: String;
  description: String;
  startsFrom?: DateTimeInput;
  fee?: Float;
}

export interface ClassroomUpsertWithWhereUniqueWithoutTeacherInput {
  where: ClassroomWhereUniqueInput;
  update: ClassroomUpdateWithoutTeacherDataInput;
  create: ClassroomCreateWithoutTeacherInput;
}

export interface ClassroomUpdateManyMutationInput {
  name?: String;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
}

export interface ClassroomScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  classroomImage?: String;
  classroomImage_not?: String;
  classroomImage_in?: String[] | String;
  classroomImage_not_in?: String[] | String;
  classroomImage_lt?: String;
  classroomImage_lte?: String;
  classroomImage_gt?: String;
  classroomImage_gte?: String;
  classroomImage_contains?: String;
  classroomImage_not_contains?: String;
  classroomImage_starts_with?: String;
  classroomImage_not_starts_with?: String;
  classroomImage_ends_with?: String;
  classroomImage_not_ends_with?: String;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  learning?: String;
  learning_not?: String;
  learning_in?: String[] | String;
  learning_not_in?: String[] | String;
  learning_lt?: String;
  learning_lte?: String;
  learning_gt?: String;
  learning_gte?: String;
  learning_contains?: String;
  learning_not_contains?: String;
  learning_starts_with?: String;
  learning_not_starts_with?: String;
  learning_ends_with?: String;
  learning_not_ends_with?: String;
  language?: String;
  language_not?: String;
  language_in?: String[] | String;
  language_not_in?: String[] | String;
  language_lt?: String;
  language_lte?: String;
  language_gt?: String;
  language_gte?: String;
  language_contains?: String;
  language_not_contains?: String;
  language_starts_with?: String;
  language_not_starts_with?: String;
  language_ends_with?: String;
  language_not_ends_with?: String;
  requirements?: String;
  requirements_not?: String;
  requirements_in?: String[] | String;
  requirements_not_in?: String[] | String;
  requirements_lt?: String;
  requirements_lte?: String;
  requirements_gt?: String;
  requirements_gte?: String;
  requirements_contains?: String;
  requirements_not_contains?: String;
  requirements_starts_with?: String;
  requirements_not_starts_with?: String;
  requirements_ends_with?: String;
  requirements_not_ends_with?: String;
  objectives?: String;
  objectives_not?: String;
  objectives_in?: String[] | String;
  objectives_not_in?: String[] | String;
  objectives_lt?: String;
  objectives_lte?: String;
  objectives_gt?: String;
  objectives_gte?: String;
  objectives_contains?: String;
  objectives_not_contains?: String;
  objectives_starts_with?: String;
  objectives_not_starts_with?: String;
  objectives_ends_with?: String;
  objectives_not_ends_with?: String;
  AND?: ClassroomScalarWhereInput[] | ClassroomScalarWhereInput;
  OR?: ClassroomScalarWhereInput[] | ClassroomScalarWhereInput;
  NOT?: ClassroomScalarWhereInput[] | ClassroomScalarWhereInput;
}

export interface LectureCreateManyWithoutBatchInput {
  create?: LectureCreateWithoutBatchInput[] | LectureCreateWithoutBatchInput;
  connect?: LectureWhereUniqueInput[] | LectureWhereUniqueInput;
}

export interface ClassroomUpdateManyWithWhereNestedInput {
  where: ClassroomScalarWhereInput;
  data: ClassroomUpdateManyDataInput;
}

export interface ClassroomCreateManyWithoutTeacherInput {
  create?:
    | ClassroomCreateWithoutTeacherInput[]
    | ClassroomCreateWithoutTeacherInput;
  connect?: ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput;
}

export interface ClassroomUpdateManyDataInput {
  name?: String;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
}

export interface BatchCreateManyWithoutClassroomInput {
  create?:
    | BatchCreateWithoutClassroomInput[]
    | BatchCreateWithoutClassroomInput;
  connect?: BatchWhereUniqueInput[] | BatchWhereUniqueInput;
}

export interface ClassroomUpdateManyWithoutStudentsInput {
  create?:
    | ClassroomCreateWithoutStudentsInput[]
    | ClassroomCreateWithoutStudentsInput;
  delete?: ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput;
  connect?: ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput;
  disconnect?: ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput;
  update?:
    | ClassroomUpdateWithWhereUniqueWithoutStudentsInput[]
    | ClassroomUpdateWithWhereUniqueWithoutStudentsInput;
  upsert?:
    | ClassroomUpsertWithWhereUniqueWithoutStudentsInput[]
    | ClassroomUpsertWithWhereUniqueWithoutStudentsInput;
  deleteMany?: ClassroomScalarWhereInput[] | ClassroomScalarWhereInput;
  updateMany?:
    | ClassroomUpdateManyWithWhereNestedInput[]
    | ClassroomUpdateManyWithWhereNestedInput;
}

export interface ClassroomCreateWithoutStudentsInput {
  name: String;
  teacher: UserCreateOneWithoutTeacherInInput;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
  batches?: BatchCreateManyWithoutClassroomInput;
}

export interface ClassroomUpdateWithWhereUniqueWithoutStudentsInput {
  where: ClassroomWhereUniqueInput;
  data: ClassroomUpdateWithoutStudentsDataInput;
}

export interface ClassroomCreateInput {
  name: String;
  teacher: UserCreateOneWithoutTeacherInInput;
  students?: UserCreateManyWithoutStudentInInput;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
  batches?: BatchCreateManyWithoutClassroomInput;
}

export interface ClassroomUpdateWithoutStudentsDataInput {
  name?: String;
  teacher?: UserUpdateOneRequiredWithoutTeacherInInput;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
  batches?: BatchUpdateManyWithoutClassroomInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserUpdateOneRequiredWithoutTeacherInInput {
  create?: UserCreateWithoutTeacherInInput;
  update?: UserUpdateWithoutTeacherInDataInput;
  upsert?: UserUpsertWithoutTeacherInInput;
  connect?: UserWhereUniqueInput;
}

export type ClassroomWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutTeacherInDataInput {
  name?: String;
  email?: String;
  fid?: String;
  role?: UserRole;
  description?: String;
  profession?: String;
  dpUrl?: String;
  studentIn?: ClassroomUpdateManyWithoutStudentsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserUpsertWithoutTeacherInInput {
  update: UserUpdateWithoutTeacherInDataInput;
  create: UserCreateWithoutTeacherInInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface ClassroomUpsertWithWhereUniqueWithoutStudentsInput {
  where: ClassroomWhereUniqueInput;
  update: ClassroomUpdateWithoutStudentsDataInput;
  create: ClassroomCreateWithoutStudentsInput;
}

export interface UserCreateManyInput {
  create?: UserCreateInput[] | UserCreateInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface ClassroomUpdateOneInput {
  create?: ClassroomCreateInput;
  update?: ClassroomUpdateDataInput;
  upsert?: ClassroomUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ClassroomWhereUniqueInput;
}

export interface ClassroomCreateWithoutBatchesInput {
  name: String;
  teacher: UserCreateOneWithoutTeacherInInput;
  students?: UserCreateManyWithoutStudentInInput;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
}

export type LectureWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface LectureScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  liveAt?: DateTimeInput;
  liveAt_not?: DateTimeInput;
  liveAt_in?: DateTimeInput[] | DateTimeInput;
  liveAt_not_in?: DateTimeInput[] | DateTimeInput;
  liveAt_lt?: DateTimeInput;
  liveAt_lte?: DateTimeInput;
  liveAt_gt?: DateTimeInput;
  liveAt_gte?: DateTimeInput;
  endAt?: DateTimeInput;
  endAt_not?: DateTimeInput;
  endAt_in?: DateTimeInput[] | DateTimeInput;
  endAt_not_in?: DateTimeInput[] | DateTimeInput;
  endAt_lt?: DateTimeInput;
  endAt_lte?: DateTimeInput;
  endAt_gt?: DateTimeInput;
  endAt_gte?: DateTimeInput;
  AND?: LectureScalarWhereInput[] | LectureScalarWhereInput;
  OR?: LectureScalarWhereInput[] | LectureScalarWhereInput;
  NOT?: LectureScalarWhereInput[] | LectureScalarWhereInput;
}

export interface LectureUpsertWithWhereUniqueWithoutBatchInput {
  where: LectureWhereUniqueInput;
  update: LectureUpdateWithoutBatchDataInput;
  create: LectureCreateWithoutBatchInput;
}

export interface ClassroomUpsertNestedInput {
  update: ClassroomUpdateDataInput;
  create: ClassroomCreateInput;
}

export interface ClassroomUpdateDataInput {
  name?: String;
  teacher?: UserUpdateOneRequiredWithoutTeacherInInput;
  students?: UserUpdateManyWithoutStudentInInput;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
  batches?: BatchUpdateManyWithoutClassroomInput;
}

export interface BatchSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BatchWhereInput;
  AND?: BatchSubscriptionWhereInput[] | BatchSubscriptionWhereInput;
  OR?: BatchSubscriptionWhereInput[] | BatchSubscriptionWhereInput;
  NOT?: BatchSubscriptionWhereInput[] | BatchSubscriptionWhereInput;
}

export interface UserCreateWithoutTeacherInInput {
  name: String;
  email: String;
  fid: String;
  role?: UserRole;
  description?: String;
  profession?: String;
  dpUrl?: String;
  studentIn?: ClassroomCreateManyWithoutStudentsInput;
}

export interface UserCreateManyWithoutStudentInInput {
  create?: UserCreateWithoutStudentInInput[] | UserCreateWithoutStudentInInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  email: String;
  fid: String;
  role?: UserRole;
  description?: String;
  profession?: String;
  dpUrl?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  fid: () => Promise<String>;
  role: () => Promise<UserRole>;
  description: () => Promise<String>;
  profession: () => Promise<String>;
  dpUrl: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  fid: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  description: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
  dpUrl: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBatch {
  count: Int;
}

export interface AggregateBatchPromise
  extends Promise<AggregateBatch>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBatchSubscription
  extends Promise<AsyncIterator<AggregateBatch>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  email: String;
  fid: String;
  role?: UserRole;
  description?: String;
  profession?: String;
  dpUrl?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  fid: () => Promise<String>;
  role: () => Promise<UserRole>;
  description: () => Promise<String>;
  profession: () => Promise<String>;
  dpUrl: () => Promise<String>;
  teacherIn: <T = FragmentableArray<Classroom>>(args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  studentIn: <T = FragmentableArray<Classroom>>(args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  fid: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  description: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
  dpUrl: () => Promise<AsyncIterator<String>>;
  teacherIn: <T = Promise<AsyncIterator<ClassroomSubscription>>>(args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  studentIn: <T = Promise<AsyncIterator<ClassroomSubscription>>>(args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClassroomEdge {
  node: Classroom;
  cursor: String;
}

export interface ClassroomEdgePromise
  extends Promise<ClassroomEdge>,
    Fragmentable {
  node: <T = ClassroomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClassroomEdgeSubscription
  extends Promise<AsyncIterator<ClassroomEdge>>,
    Fragmentable {
  node: <T = ClassroomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ClassroomPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
}

export interface ClassroomPreviousValuesPromise
  extends Promise<ClassroomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  classroomImage: () => Promise<String>;
  rating: () => Promise<Int>;
  learning: () => Promise<String>;
  language: () => Promise<String>;
  requirements: () => Promise<String>;
  objectives: () => Promise<String>;
}

export interface ClassroomPreviousValuesSubscription
  extends Promise<AsyncIterator<ClassroomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  classroomImage: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  learning: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<String>>;
  requirements: () => Promise<AsyncIterator<String>>;
  objectives: () => Promise<AsyncIterator<String>>;
}

export interface ClassroomConnection {
  pageInfo: PageInfo;
  edges: ClassroomEdge[];
}

export interface ClassroomConnectionPromise
  extends Promise<ClassroomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClassroomEdge>>() => T;
  aggregate: <T = AggregateClassroomPromise>() => T;
}

export interface ClassroomConnectionSubscription
  extends Promise<AsyncIterator<ClassroomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClassroomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClassroomSubscription>() => T;
}

export interface BatchEdge {
  node: Batch;
  cursor: String;
}

export interface BatchEdgePromise extends Promise<BatchEdge>, Fragmentable {
  node: <T = BatchPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BatchEdgeSubscription
  extends Promise<AsyncIterator<BatchEdge>>,
    Fragmentable {
  node: <T = BatchSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Lecture {
  id: ID_Output;
  name: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  liveAt: DateTimeOutput;
  endAt: DateTimeOutput;
}

export interface LecturePromise extends Promise<Lecture>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  liveAt: () => Promise<DateTimeOutput>;
  endAt: () => Promise<DateTimeOutput>;
  teacher: <T = UserPromise>() => T;
  students: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  batch: <T = BatchPromise>() => T;
  classroom: <T = ClassroomPromise>() => T;
}

export interface LectureSubscription
  extends Promise<AsyncIterator<Lecture>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  liveAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  teacher: <T = UserSubscription>() => T;
  students: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  batch: <T = BatchSubscription>() => T;
  classroom: <T = ClassroomSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface LecturePreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  liveAt: DateTimeOutput;
  endAt: DateTimeOutput;
}

export interface LecturePreviousValuesPromise
  extends Promise<LecturePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  liveAt: () => Promise<DateTimeOutput>;
  endAt: () => Promise<DateTimeOutput>;
}

export interface LecturePreviousValuesSubscription
  extends Promise<AsyncIterator<LecturePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  liveAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LectureSubscriptionPayload {
  mutation: MutationType;
  node: Lecture;
  updatedFields: String[];
  previousValues: LecturePreviousValues;
}

export interface LectureSubscriptionPayloadPromise
  extends Promise<LectureSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LecturePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LecturePreviousValuesPromise>() => T;
}

export interface LectureSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LectureSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LectureSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LecturePreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LectureEdge {
  node: Lecture;
  cursor: String;
}

export interface LectureEdgePromise extends Promise<LectureEdge>, Fragmentable {
  node: <T = LecturePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LectureEdgeSubscription
  extends Promise<AsyncIterator<LectureEdge>>,
    Fragmentable {
  node: <T = LectureSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Batch {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description: String;
  startsFrom?: DateTimeOutput;
  fee?: Float;
}

export interface BatchPromise extends Promise<Batch>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  lectures: <T = FragmentableArray<Lecture>>(args?: {
    where?: LectureWhereInput;
    orderBy?: LectureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  teacher: <T = UserPromise>() => T;
  students: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  classroom: <T = ClassroomPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  startsFrom: () => Promise<DateTimeOutput>;
  fee: () => Promise<Float>;
}

export interface BatchSubscription
  extends Promise<AsyncIterator<Batch>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lectures: <T = Promise<AsyncIterator<LectureSubscription>>>(args?: {
    where?: LectureWhereInput;
    orderBy?: LectureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  teacher: <T = UserSubscription>() => T;
  students: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  classroom: <T = ClassroomSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  startsFrom: () => Promise<AsyncIterator<DateTimeOutput>>;
  fee: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateClassroom {
  count: Int;
}

export interface AggregateClassroomPromise
  extends Promise<AggregateClassroom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClassroomSubscription
  extends Promise<AsyncIterator<AggregateClassroom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Classroom {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description?: String;
  classroomImage?: String;
  rating?: Int;
  learning?: String;
  language?: String;
  requirements?: String;
  objectives?: String;
}

export interface ClassroomPromise extends Promise<Classroom>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  teacher: <T = UserPromise>() => T;
  students: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  classroomImage: () => Promise<String>;
  rating: () => Promise<Int>;
  learning: () => Promise<String>;
  language: () => Promise<String>;
  requirements: () => Promise<String>;
  objectives: () => Promise<String>;
  batches: <T = FragmentableArray<Batch>>(args?: {
    where?: BatchWhereInput;
    orderBy?: BatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClassroomSubscription
  extends Promise<AsyncIterator<Classroom>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  teacher: <T = UserSubscription>() => T;
  students: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<AsyncIterator<String>>;
  classroomImage: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  learning: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<String>>;
  requirements: () => Promise<AsyncIterator<String>>;
  objectives: () => Promise<AsyncIterator<String>>;
  batches: <T = Promise<AsyncIterator<BatchSubscription>>>(args?: {
    where?: BatchWhereInput;
    orderBy?: BatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClassroomSubscriptionPayload {
  mutation: MutationType;
  node: Classroom;
  updatedFields: String[];
  previousValues: ClassroomPreviousValues;
}

export interface ClassroomSubscriptionPayloadPromise
  extends Promise<ClassroomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClassroomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClassroomPreviousValuesPromise>() => T;
}

export interface ClassroomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClassroomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClassroomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClassroomPreviousValuesSubscription>() => T;
}

export interface BatchConnection {
  pageInfo: PageInfo;
  edges: BatchEdge[];
}

export interface BatchConnectionPromise
  extends Promise<BatchConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BatchEdge>>() => T;
  aggregate: <T = AggregateBatchPromise>() => T;
}

export interface BatchConnectionSubscription
  extends Promise<AsyncIterator<BatchConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BatchEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBatchSubscription>() => T;
}

export interface BatchPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description: String;
  startsFrom?: DateTimeOutput;
  fee?: Float;
}

export interface BatchPreviousValuesPromise
  extends Promise<BatchPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  startsFrom: () => Promise<DateTimeOutput>;
  fee: () => Promise<Float>;
}

export interface BatchPreviousValuesSubscription
  extends Promise<AsyncIterator<BatchPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  startsFrom: () => Promise<AsyncIterator<DateTimeOutput>>;
  fee: () => Promise<AsyncIterator<Float>>;
}

export interface BatchSubscriptionPayload {
  mutation: MutationType;
  node: Batch;
  updatedFields: String[];
  previousValues: BatchPreviousValues;
}

export interface BatchSubscriptionPayloadPromise
  extends Promise<BatchSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BatchPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BatchPreviousValuesPromise>() => T;
}

export interface BatchSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BatchSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BatchSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BatchPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface LectureConnection {
  pageInfo: PageInfo;
  edges: LectureEdge[];
}

export interface LectureConnectionPromise
  extends Promise<LectureConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LectureEdge>>() => T;
  aggregate: <T = AggregateLecturePromise>() => T;
}

export interface LectureConnectionSubscription
  extends Promise<AsyncIterator<LectureConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LectureEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLectureSubscription>() => T;
}

export interface AggregateLecture {
  count: Int;
}

export interface AggregateLecturePromise
  extends Promise<AggregateLecture>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLectureSubscription
  extends Promise<AsyncIterator<AggregateLecture>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Batch",
    embedded: false
  },
  {
    name: "Classroom",
    embedded: false
  },
  {
    name: "Lecture",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserRole",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
